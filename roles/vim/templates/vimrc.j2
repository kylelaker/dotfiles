" vim: set ft=vim:

"""
" PLUGINS
"""
call plug#begin()
Plug 'iCyMind/NeoSolarized'              " Truecolor Solarized theme
Plug 'Yggdroot/indentLine'               " Thin vertical lines at indents
Plug 'vim-airline/vim-airline'           " Needed for buffer display
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'zamua/mocha'                       " CS 432 Decaf syntax highlighting
Plug 'kylelaker/riscv.vim'
Plug 'kylelaker/cisco.vim'
Plug 'vim-syntastic/syntastic'
Plug 'speshak/vim-cfn'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
call plug#end()

"""
" BASIC VIM SETTINGS
"""

{% if vim_cmd != 'nvim' %}
set encoding=utf-8
{% endif %}

" Required for lots of vim things
set nocompatible

syntax on

" Indent settings
set smarttab expandtab shiftwidth=4

" Show numbers in gutter but not relative numbers
set number norelativenumber

" Highlight the line with the cursor
set cursorline

" spellcheck
set spelllang=en

" Solarized Dark theme
set termguicolors
colorscheme NeoSolarized
set background=light

" Scrolling
set scrolloff=5

" Disable line wrap
set nowrap

" Bar at 80 characters
if exists("+colorcolumn")
    set colorcolumn=100
    highlight ColorColumn ctermbg=DarkCyan guibg=DarkCyan
endif

{% if vim_cmd == 'nvim' %}
" Enabled only when using neovim
" Live preview of :substitute.
set inccommand=split
{% endif %}

"""
" PLUGIN SETTINGS
"""

" Show buffers at top of screen.
let g:airline#extensions#tabline#enabled = 1

" Use powerline fonts for airline
let g:airline_powerline_fonts = 1

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_cloudformation_checkers = ['cfn_lint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


"""
" KEY MAPPINGS
"""

" Quicker buffer switching
nnoremap gb :ls<CR>:b<Space>
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>

" Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" make bindings:
"   <F6> to `make`
"   <F7> to `make clean default test`
map  <F6> :make<CR>
imap <F6> <C-O>:make<CR>
map  <F7> :make clean default test<CR>
imap <F7> <C-O>:make clean default test<CR>

" keep selection after shifting with < or >
vnoremap < <gv
vnoremap > >gv

" CoC mappings
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction


"""
" BACKUP/UNDO FILES
"""

" backup and undo files
" files will be stored in {{ vim_dir }}/undodir (set by Ansible)
if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  set backupdir-=.
  set backupdir^={{ vim_dir }}/undodir
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
    set undodir-=.
    set undodir^={{ vim_dir }}/undodir
  endif
endif

"""
" LANGUAGE PREFERENCES
"""

augroup vimrcEx
au!
" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78 shiftwidth=2 tabstop=2
autocmd FileType java  setlocal shiftwidth=4 tabstop=4
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
autocmd FileType c,cpp setlocal shiftwidth=4 tabstop=4
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
autocmd FileType haskell setlocal shiftwidth=2 tabstop=2
augroup END
