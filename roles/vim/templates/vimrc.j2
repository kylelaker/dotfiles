" vim: set ft=vim:

"""
" PLUGINS
"""
call plug#begin()
Plug 'altercation/vim-colors-solarized'  " Solarized color scheme
Plug 'Yggdroot/indentLine'               " Thin vertical lines at indents
Plug 'tpope/vim-fugitive'                " Git plugin
Plug 'sheerun/vim-polyglot'              " Support for many languages
Plug 'vim-airline/vim-airline'           " Needed for buffer display
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-rhubarb'                 " GitHub support
Plug 'zamua/mocha'                       " CS 432 Decaf syntax highlighting
call plug#end()

"""
" BASIC VIM SETTINGS
"""

" Required for lots of vim things
set nocompatible

syntax on

" Indent settings
set smarttab expandtab shiftwidth=4

" Show numbers in gutter but not relative numbers
set number norelativenumber

" Highlight the line with the cursor
set cursorline

" spellcheck
set spelllang=en

" Solarized Dark theme
set background=dark
colorscheme solarized

" Scrolling
set scrolloff=5

" Disable line wrap
set nowrap

" Bar at 80 characters
if exists("+colorcolumn")
    set colorcolumn=80
    highlight ColorColumn ctermbg=DarkCyan guibg=DarkCyan
endif

{% if vim_cmd == 'nvim' %}
" Enabled only when using neovim
" Live preview of :substitute.
set inccommand=split
{% endif %}


"""
" PLUGIN SETTINGS
"""

" Show buffers at top of screen.
let g:airline#extensions#tabline#enabled = 1

" Use powerline fonts for airline
let g:airline_powerline_fonts = 1


"""
" KEY MAPPINGS
"""

" Quicker buffer switching
nnoremap gb :ls<CR>:b<Space>
nnoremap <Tab> :bn<CR>
nnoremap <S-Tab> :bp<CR>

" Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" make bindings: 
"   <F6> to `make`
"   <F7> to `make clean default test`
map  <F6> :make<CR>
imap <F6> <C-O>:make<CR>
map  <F7> :make clean default test<CR>
imap <F7> <C-O>:make clean default test<CR>

" keep selection after shifting with < or >
vnoremap < <gv
vnoremap > >gv

"""
" BACKUP/UNDO FILES
"""

" backup and undo files
" files will be stored in {{ vim_dir }}/undodir (set by Ansible)
if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  set backupdir-=.
  set backupdir^={{ vim_dir }}/undodir
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
    set undodir-=.
    set undodir^={{ vim_dir }}/undodir
  endif
endif

"""
" LANGUAGE PREFERENCES
"""

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78 shiftwidth=2 tabstop=2
  autocmd FileType java  setlocal shiftwidth=4 tabstop=4
  autocmd FileType yml setlocal shiftwidth=2 tabstop=2
  autocmd FileType c,cpp setlocal shiftwidth=4 tabstop=4
  autocmd FileType ruby setlocal shiftwidth=2 tabstop=2
  autocmd FileType haskell setlocal shiftwidth=2 tabstop=2
  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")
